# openapi.yaml
openapi: 3.0.0
info:
  title: Kixago DeFi Aggregator API
  version: 1.0.0
  description: A unified, multi-protocol, multi-chain API for querying DeFi lending positions.

servers:
  - url: https://api.kixago.com/api/v1
    description: Production Server
  - url: http://localhost:3000/api/v1
    description: Local Development Server

paths:
  /lending/positions:
    get:
      tags:
        - Lending
      summary: Retrieve aggregated lending positions for a user address.
      description: |
        Queries all configured protocols (Aave, Compound, MakerDAO) across all supported chains (Ethereum, Base, etc.) and returns all active positions in a single, normalized structure.
      parameters:
        - in: query
          name: address
          schema:
            type: string
            pattern: '^0x[a-fA-F0-9]{40}$'
          required: true
          description: The user's wallet address to query (e.g., 0xf0bb20865277abd641a307ece5ee04e79073416c).
        - in: query
          name: cache
          schema:
            type: boolean
            default: true
          required: false
          description: Set to 'false' to bypass the cache and force a new on-chain fetch.

      responses:
        '200':
          description: Successful retrieval of one or more lending positions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AggregatedResponse'
              example: # Use your successful API output here
                success: true
                data:
                  count: 2
                  # ... full example from your successful curl command ...
        '400':
          description: Invalid address format or missing parameter.

components:
  schemas:
    TokenDetail:
      type: object
      properties:
        token: { type: string, description: "Token symbol (e.g., WETH, USDC)." }
        amount: { type: number, format: float, description: "Raw token amount." }
        usd_value: { type: number, format: float, description: "USD value of this specific amount." }
        apy: { type: number, format: float, description: "Annual Percentage Yield/Rate for this token." }
        token_address: { type: string, description: "Contract address of the token." }
    LendingPosition:
      type: object
      properties:
        protocol: { type: string, description: "The DeFi protocol (e.g., aave)." }
        protocol_version: { type: string, description: "Protocol version (e.g., v3)." }
        chain: { type: string, description: "Blockchain network (e.g., base, ethereum)." }
        user_address: { type: string, description: "The queried address." }
        collateral_details:
          type: array
          items: { $ref: '#/components/schemas/TokenDetail' }
          description: "List of collateral assets."
        # ... continue for all fields from the types.go struct ...
    AggregatedResponse:
      type: object
      properties:
        success: { type: boolean }
        data:
          type: object
          properties:
            count: { type: integer, description: "Total number of positions found." }
            positions:
              type: array
              items: { $ref: '#/components/schemas/LendingPosition' }
        timestamp: { type: string, format: date-time }
